import java.util.Set;
import java.util.TreeSet;

aspect Interpreter {
	public class ActivationRecord {
		protected int value;

		public int get() {
			return value;
		}
		public void set(ActivationRecord actrec) {
			value = actrec.value;
		}
	}

	protected ActivationRecord ASTNode.create() {
		return new ActivationRecord();
	}
	public void Program.eval() {
		for (Function function : getFunctionList()) {
			function.eval(create());
		}
	}
	public int Function.eval(ActivationRecord actrec) {
		if (lookup("main") == unknownDecl()) {
			throw new RuntimeException();
		} else {
			for (Stmt stmt : getCodeBlock().getStatementList()) {
				stmt.eval(actrec);
			}
		}
		return 0;
	}
	abstract public void Stmt.eval(ActivationRecord actrec);
	public void Declaration.eval(ActivationRecord actrec) {
	}
	public void Assignment.eval(ActivationRecord actrec) {
		System.out.println(getValue().eval(actrec));
	}
	public void ReAssignment.eval(ActivationRecord actrec) {
	}
	public void WhileStmt.eval(ActivationRecord actrec) {
	}
	public void IfStmt.eval(ActivationRecord actrec) {
	}
	public void FunctionStmt.eval(ActivationRecord actrec) {
		if (lookup("print") != unknownDecl()) {
			FuncCall fc = (FuncCall) this.getName();
			for (Expr expr : fc.getExprList()) {
				System.out.println(expr.eval(actrec));
			}
		}
	}
	public void Return.eval(ActivationRecord actrec) {
	}
	public int Expr.eval(ActivationRecord actrec) {
		int exprVal = 0;
		if (this instanceof IntValue) {
			IntValue expr = (IntValue) this;
			exprVal = Integer.parseInt(expr.getINTEGER());
		}
		return exprVal;
	}
	public int Mul.eval(ActivationRecord actrec) {
		int leftVal;
		int rightVal;
		if (getLeft() instanceof IntValue) {
			IntValue left = (IntValue) getLeft();
			leftVal = Integer.parseInt(left.getINTEGER());
		} else {
			leftVal = getLeft().eval(actrec);
		}
		if (getRight() instanceof IntValue) {
			IntValue right = (IntValue) getRight();
			rightVal = Integer.parseInt(right.getINTEGER());
		} else {
			rightVal = getRight().eval(actrec);
		}
		return leftVal * rightVal;
	}
	public int Div.eval(ActivationRecord actrec) {
		int leftVal;
		int rightVal;
		if (getLeft() instanceof IntValue) {
			IntValue left = (IntValue) getLeft();
			leftVal = Integer.parseInt(left.getINTEGER());
		} else {
			leftVal = getLeft().eval(actrec);
		}
		if (getRight() instanceof IntValue) {
			IntValue right = (IntValue) getRight();
			rightVal = Integer.parseInt(right.getINTEGER());
		} else {
			rightVal = getRight().eval(actrec);
		}
		return leftVal / rightVal;
	}
	public int Mod.eval(ActivationRecord actrec) {
		int leftVal;
		int rightVal;
		if (getLeft() instanceof IntValue) {
			IntValue left = (IntValue) getLeft();
			leftVal = Integer.parseInt(left.getINTEGER());
		} else {
			leftVal = getLeft().eval(actrec);
		}
		if (getRight() instanceof IntValue) {
			IntValue right = (IntValue) getRight();
			rightVal = Integer.parseInt(right.getINTEGER());
		} else {
			rightVal = getRight().eval(actrec);
		}
		return leftVal % rightVal;
	}
	public int Add.eval(ActivationRecord actrec) {
		int leftVal;
		int rightVal;
		if (getLeft() instanceof IntValue) {
			IntValue left = (IntValue) getLeft();
			leftVal = Integer.parseInt(left.getINTEGER());
		} else {
			leftVal = getLeft().eval(actrec);
		}
		if (getRight() instanceof IntValue) {
			IntValue right = (IntValue) getRight();
			rightVal = Integer.parseInt(right.getINTEGER());
		} else {
			rightVal = getRight().eval(actrec);
		}
		return leftVal + rightVal;
	}
	public int Sub.eval(ActivationRecord actrec) {
		int leftVal;
		int rightVal;
		if (getLeft() instanceof IntValue) {
			IntValue left = (IntValue) getLeft();
			leftVal = Integer.parseInt(left.getINTEGER());
		} else {
			leftVal = getLeft().eval(actrec);
		}
		if (getRight() instanceof IntValue) {
			IntValue right = (IntValue) getRight();
			rightVal = Integer.parseInt(right.getINTEGER());
		} else {
			rightVal = getRight().eval(actrec);
		}
		return leftVal - rightVal;
	}
}
