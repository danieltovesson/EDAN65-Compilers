aspect TypeAnalysis {
  /*******************************************
	EXPRESSIONS
	*******************************************/

  syn Type Expr.type();

  eq Mul.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? intType() : unknownType();
  }

  eq Div.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? intType() : unknownType();
  }

  eq Mod.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? intType() : unknownType();
  }

  eq Add.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? intType() : unknownType();
  }

  eq Sub.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? intType() : unknownType();
  }

  eq Lesser.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? boolType() : unknownType();
  }

  eq Greater.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? boolType() : unknownType();
  }

  eq LesserEqual.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? boolType() : unknownType();
  }

  eq GreaterEqual.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? boolType() : unknownType();
  }

  eq NotEqual.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? boolType() : unknownType();
  }

  eq Equal.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? boolType() : unknownType();
  }

  eq FuncCall.type() = intType();

  eq IdUse.type() = intType();

  eq IntValue.type() = intType();

  /*******************************************
	ID DECLARATION
	*******************************************/

  syn Type IdDecl.type() = intType();

  /*******************************************
  EXPECTED TYPE
  *******************************************/

  inh Type Expr.expectedType();

  eq Program.getChild().expectedType() = unknownType();
  eq Assignment.getValue().expectedType() = intType();
  eq ReAssignment.getValue().expectedType() = intType();
  eq WhileStmt.getCondition().expectedType() = boolType();
  eq IfStmt.getCondition().expectedType() = boolType();
  eq Return.getReturn().expectedType() = intType();

  /*******************************************
  COMPATIBLE TYPE
  *******************************************/

  syn boolean Type.compatibleType(Type type) = this == type;

  /*******************************************
  IS FUNCTION OR VARIABLE
  *******************************************/

  inh boolean IdDecl.isVariable();
  inh boolean IdDecl.isFunction();

  syn boolean FuncCall.isVariable() = false;
  syn boolean FuncCall.isFunction() = true;

  syn boolean IdUse.isVariable() = true;
  syn boolean IdUse.isFunction() = false;

  inh boolean IdUse.variableExpected();
  inh boolean IdUse.functionExpected();
  eq FuncCall.getName().variableExpected() = false;
  eq FuncCall.getName().functionExpected() = true;
  eq IdUse.getID().variableExpected() = true;
  eq IdUse.getID().functionExpected() = false;

  syn boolean IdUse.isVariable() = variableExpected() == isVariable();
  syn boolean IdUse.isFunction() = functionExpected() == isFunction();

  eq Function.getName().isVariable() = false;
  eq Function.getName().isFunction() = true;

  eq FuncCall.getName().isVariable() = false;
  eq FuncCall.getName().isFunction() = true;

  eq Declaration.getName().isVariable() = true;
  eq Declaration.getName().isFunction() = false;

  eq Assignment.getName().isVariable() = true;
  eq Assignment.getName().isFunction() = false;

  eq ReAssignment.getName().isVariable() = true;
  eq ReAssignment.getName().isFunction() = false;
}
