aspect TypeAnalysis {
  /*******************************************
	EXPRESSIONS
	*******************************************/

  syn Type Expr.type();

  eq Mul.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? intType() : unknownType();
  }

  eq Div.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? intType() : unknownType();
  }

  eq Mod.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? intType() : unknownType();
  }

  eq Add.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? intType() : unknownType();
  }

  eq Sub.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? intType() : unknownType();
  }

  eq Lesser.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? boolType() : unknownType();
  }

  eq Greater.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? boolType() : unknownType();
  }

  eq LesserEqual.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? boolType() : unknownType();
  }

  eq GreaterEqual.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? boolType() : unknownType();
  }

  eq NotEqual.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? boolType() : unknownType();
  }

  eq Equal.type() {
    return getLeft().type().isIntType() && getRight().type().isIntType() ? boolType() : unknownType();
  }

  eq FuncCall.type() = intType();

  eq IdUse.type() = intType();

  eq IntValue.type() = intType();

  /*******************************************
	ID DECLARATION
	*******************************************/

  syn Type IdDecl.type() = intType();

  /*******************************************
  EXPECTED TYPE
  *******************************************/

  inh Type Expr.expectedType();

  eq Program.getChild().expectedType() = unknownType();
  eq Assignment.getChild().expectedType() = intType();
  eq ReAssignment.getChild().expectedType() = intType();
  eq WhileStmt.getChild().expectedType() = boolType();
  eq IfStmt.getChild().expectedType() = boolType();
  eq Return.getChild().expectedType() = intType();

  /*******************************************
  COMPATIBLE TYPE
  *******************************************/

  syn boolean Type.compatibleType(Type type) = this == type;
}
