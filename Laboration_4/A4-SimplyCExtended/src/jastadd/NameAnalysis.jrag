aspect NameAnalysis {
	/*******************************************
	ID USE
	*******************************************/

	inh IdDecl IdUse.lookup(String name);
	syn IdDecl IdUse.decl() = lookup(getID());

	/*******************************************
	ID DECLARATION
	*******************************************/

	inh IdDecl IdDecl.lookup(String name);

	/*******************************************
	IS MULTI DECLARED
	*******************************************/

	syn boolean IdDecl.isMultiDeclared() = lookup(getID()) != this;

	/*******************************************
	PROGRAM
	*******************************************/

	eq Program.getChild().lookup(String name) {
    for (Function function : getFunctionList()) {
    	IdDecl decl = function.getName();
      if (decl.getID().equals(name)) {
      	return decl;
      }
  	}
		return unknownDecl();
	}

	/*******************************************
	STATEMENT
	*******************************************/

	inh IdDecl Stmt.lookup(String name);
	syn IdDecl Stmt.localLookup(String name) = unknownDecl();

 	syn IdDecl Declaration.localLookup(String name) {
		return getName().getID().equals(name) ? getName() : unknownDecl();
 	}

 	syn IdDecl Assignment.localLookup(String name) {
		return getName().getID().equals(name) ? getName() : unknownDecl();
 	}

	/*******************************************
	FUNCTION
	*******************************************/

	inh IdDecl Function.lookup(String name);
	syn IdDecl Function.localLookup(String name, int until) {
    for (int i = 0; i < getNumParameter(); i++) {
      if (getParameter(i).getID().equals(name)) {
        return getParameter(i);
      }
    }
    return unknownDecl();
  }

 	eq Function.getParameter(int index).lookup(String name) {
    for (int i = 0; i <= index; i++) {
      if (getParameter(i).getID().equals(name)) {
        return getParameter(i);
      }
    }
    return lookup(name);
  }

	/*******************************************
	BLOCK
	*******************************************/

	inh IdDecl Block.lookup(String name);
	syn IdDecl Block.localLookup(String name, int until) {
		for (int i = 0; i <= until; i++) {
    	IdDecl decl = getStatement(i).localLookup(name);
      if (decl.getID().equals(name)) {
        return decl;
      }
    }
    return unknownDecl();
  }

	eq Block.getStatement(int index).lookup(String name) {
    IdDecl decl = localLookup(name, index);
    return !decl.isUnknown() ? decl : lookup(name);
 }
}

aspect CircularDefinitions {
	/* Identify circular definitions in let expressions */
	inh boolean IdUse.inExprOf(IdDecl decl);
	syn boolean IdUse.isCircular() = inExprOf(decl());
	// inh boolean Binding.inExprOf(IdDecl decl);
	// eq Binding.getExpr().inExprOf(IdDecl decl)
	// 	= getIdDecl() == decl || inExprOf(decl);
	eq Program.getChild().inExprOf(IdDecl decl) = false;
}
