aspect Visitor {
	/**
	 * Visitor interface for Calc language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(Function node, Object data);
		public Object visit(Block node, Object data);
		public Object visit(Declaration node, Object data);
		public Object visit(Assignment node, Object data);
		public Object visit(WhileStmt node, Object data);
		public Object visit(IfStmt node, Object data);
		public Object visit(Return node, Object data);
		public Object visit(Print node, Object data);
		public Object visit(FuncCall node, Object data);
		public Object visit(Mul node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Mod node, Object data);
		public Object visit(Add node, Object data);
		public Object visit(Sub node, Object data);
		public Object visit(Lesser node, Object data);
		public Object visit(Greater node, Object data);
		public Object visit(LesserEqual node, Object data);
		public Object visit(GreaterEqual node, Object data);
		public Object visit(NotEqual node, Object data);
		public Object visit(Equal node, Object data);
		public Object visit(IntValue node, Object data);
		public Object visit(Id node, Object data);
		public Object visit(IdDecl node, Object data);
		public Object visit(IdUse node, Object data);
		public Object visit(Let node, Object data);
		public Object visit(Binding node, Object data);
		public Object visit(Ask node, Object data);
	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Funcion.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Block.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Declaration.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Assignment.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object WhileStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IfStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Return.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Print.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FuncCall.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mul.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Div.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mod.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Add.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Sub.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Lesser.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Greater.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object LesserEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object GreaterEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object NotEqual.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Equal.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IntValue.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Id.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Let.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Binding.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Ask.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}
