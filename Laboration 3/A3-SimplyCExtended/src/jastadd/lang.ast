Program ::= Function*;

Block ::= [Stmt];

Function ::= name:Id parameter:IdDecl* codeBlock:Block;

abstract Stmt;
Declaration:Stmt ::= name:IdDecl [assignment:Expr];
Assignment:Stmt ::= name:IdUse value:Expr;
WhileStmt:Stmt ::= condition:Expr codeBlock:Block;
IfStmt:Stmt ::= condition:Expr codeBlock:Block [else:Block];
Return:Stmt ::= return:Expr;
Print:Stmt ::= print:Expr;

abstract Expr;
abstract BinExpr:Expr ::= left:Expr right:Expr;

FuncCall:Expr ::= name:Id [expr:Expr];

Mul:BinExpr;
Div:BinExpr;
Mod:BinExpr;
Add:BinExpr;
Sub:BinExpr;

Lesser:BinExpr;
Greater:BinExpr;
LesserEqual:BinExpr;
GreaterEqual:BinExpr;
NotEqual:BinExpr;
Equal:BinExpr;

Id ::= <ID>;
IdDecl ::= <ID>;
IdUse:Expr ::= <ID>;
IntValue:Expr ::= <INTEGER>;
