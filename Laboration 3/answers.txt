Visitor framework
1. It is a fallback for when the class is not recognized or implemented
2. Because it is a combination of expression
3. The method might not recognize the class it is correctly, that is how Java
   works

CheckInteractiveVisitor
1. askNode.accept(new Visitor(), data);
2. You can use other patterns like the Strategy patter
3. Yes, it will traverse through all children nodes without changing its data
4. Add a count variable in the Visitor class and methods to return it

PrettyPrint
1. Program program = (Program) parser.parse(scanner);
   program.prettyPrint(System.out);

NameAnalysis
1. Use visitors to confirm the type of the symbol
2. Do a try/catch around respective checkNames() method
3. Using the push() method. Why would you want a pop()?

Implement MSN analysis for SimpliC
1. It would be preferable to use the data parameter as it can be used as a
   dictionary with all the nodes as keys and the count as value. The cons for
   this is that it can be hard to keep track of. Pros of using state variables
   is that is is easy to keep track of but it would require lots of state
   variables. Also new methods would be needed to return the values
2. It would be easier to use state variables

Implement name analysis and error checking
1. You can never redeclare a variable but shadowing is allowed if variable is
   declared in another statement
2. No, because they are passed for a reason
3. ?
