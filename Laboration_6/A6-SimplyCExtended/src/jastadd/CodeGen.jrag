/**
 * Simple code generation for the Calc language (EDAN65 course labs).
 * @author Jesper Ã–qvist
 */
import java.util.Collections;

aspect CodeGen {

  public void Program.genCode(PrintStream out) {
    out.println(".global _start");
    out.println(".data");
    out.println("buf: .skip 1024");
    out.println();
    out.println(".text");
    out.println("_start:");
    out.println();

    // Call main function
    out.println("call main");

    // Call sys_exit:
    out.println("movq $0, %rdi");
    out.println("movq $60, %rax");
    out.println("syscall");
    out.println();

    for (Function function: getFunctionList()) {
      function.genCode(out);
    }
    // Helper procedures for input/output:
		out.println("# Procedure to read number from stdin.");
		out.println("# C signature: long int read(void)");
		out.println("read:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $0, %rdi");
		out.println("        movq $buf, %rsi");
		out.println("        movq $1024, %rdx");
		out.println("        movq $0, %rax");
		out.println("        syscall                 # sys_read(0, buf, 1024)");
		out.println("        ### Convert string to integer (atoi).");
		out.println("        ### RAX = string length (nchar)");
		out.println("        ### RSI = string pointer");
		out.println("        movq $0, %rdx           # sum <- 0");
		out.println("        cmpq $0, %rax           # if (nchar > 0)");
		out.println("        jle atoi_done           # nchar <= 0");
		out.println("        movq %rsi, %rdi         # copy RSI to RDI for sign check later");
		out.println("        movb (%rsi), %ch        # look at first char");
		out.println("        cmp $0x2D, %ch");
		out.println("        jne atoi_loop");
		out.println("        incq %rsi               # skip sign char");
		out.println("atoi_loop:");
		out.println("        cmpq $0, %rax           # while (nchar > 0)");
		out.println("        jle atoi_done           # leave loop if nchar <= 0");
		out.println("        movzbq (%rsi), %rcx     # move byte, zero extend to quad-word");
		out.println("        cmpq $0x30, %rcx        # test if < '0'");
		out.println("        jl atoi_done            # character is not numeric");
		out.println("        cmpq $0x39, %rcx        # test if > '9'");
		out.println("        jg atoi_done            # character is not numeric");
		out.println("        imulq $10, %rdx         # multiply sum by 10");
		out.println("        subq $0x30, %rcx        # value of character");
		out.println("        addq %rcx, %rdx         # add to sum");
		out.println("        incq %rsi               # step to next char");
		out.println("        decq %rax               # nchar--");
		out.println("        jmp atoi_loop           # loop back");
		out.println("atoi_done:");
		out.println("        movq %rdx, %rax         # put result value in RAX");
		out.println("        movb (%rdi), %ch        # check sign char");
		out.println("        cmp $0x2D, %ch");
		out.println("        jne read_end");
		out.println("        negq %rax               # negate result due to sign char");
		out.println("read_end:");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("# Procedure to print number to stdout.");
		out.println("# C signature: void print(long int)");
		out.println("print:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        ### Convert integer to string (itoa).");
		out.println("        movq 16(%rbp), %rax");
		out.println("        movq $(buf+1023), %rsi  # RSI = write pointer (starts at end of buffer)");
		out.println("        movb $0x0A, (%rsi)      # insert newline");
		out.println("        movq $1, %rcx           # RCX = string length");
		out.println("        cmpq $0, %rax");
		out.println("        jge itoa_loop");
		out.println("        negq %rax               # negate to make RAX positive");
		out.println("itoa_loop:                      # do.. while (at least one iteration)");
		out.println("        movq $10, %rdi");
		out.println("        movq $0, %rdx");
		out.println("        idivq %rdi              # divide RDX:RAX by 10");
		out.println("        addb $0x30, %dl         # remainder + '0'");
		out.println("        decq %rsi               # move string pointer");
		out.println("        movb %dl, (%rsi)");
		out.println("        incq %rcx               # increment string length");
		out.println("        cmpq $0, %rax");
		out.println("        jg itoa_loop            # produce more digits");
		out.println("itoa_done:");
		out.println("        movq 16(%rbp), %rax");
		out.println("        cmpq $0, %rax");
		out.println("        jge print_end");
		out.println("        decq %rsi");
		out.println("        incq %rcx");
		out.println("        movb $0x2D, (%rsi)");
		out.println("print_end:");
		out.println("        movq $1, %rdi");
		out.println("        movq %rcx, %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("print_string:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $1, %rdi");
		out.println("        movq 16(%rbp), %rsi");
		out.println("        movq 24(%rbp), %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
  }

  public void Function.genCode(PrintStream out) {
    out.println(getName().getID() + ":");
    out.println("\t pushq %rbp");
    out.println("\t movq %rsp, %rbp");
    out.println("\t subq $" + (numLocals() * 8) + ", %rsp");
    for (int i = 0; i < getNumParameter(); i++) {
      IdDecl idDecl = getParameter(i);
      out.println("\t movq " + (8)*(i+2) + "(%rbp), %rax");
      out.println("\t movq %rax, " + idDecl.address());
    }
    getCodeBlock().genCode(out);
  }

  public void Block.genCode(PrintStream out) {
    for (Stmt stmt : getStatementList()) {
      stmt.genCode(out);
    }
  }

  abstract void Stmt.genCode(PrintStream out);
  public void Declaration.genCode(PrintStream out) {
  }
  public void Assignment.genCode(PrintStream out) {
    out.println("Assignment");
    // getValue().genCode(out);
    // getName().genCode(out);
  }
  public void ReAssignment.genCode(PrintStream out) {
  }
  public void WhileStmt.genCode(PrintStream out) {
  }
  public void IfStmt.genCode(PrintStream out) {
  }
  public void FunctionStmt.genCode(PrintStream out) {
    getName().genCode(out);
  }
  public void Return.genCode(PrintStream out) {
    getReturn().genCode(out);
    out.println("\t movq %rbp, %rsp");
    out.println("\t popq %rbp");
		out.println("\t ret");
		out.println();
  }

  abstract void Expr.genCode(PrintStream out);
  public void FuncCall.genCode(PrintStream out) {
    // Push arguments on the stack in reverse order
    for (int i = (getNumExpr() - 1); i >= 0; i--) {
      Expr expr = getExpr(i);
      expr.genCode(out);
      out.println("\t pushq %rax");
    }
    out.println("\t call " + getName().getID());
    out.println("\t addq $" + (getNumExpr() * 8) + ", %rsp");
  }
  public void Mul.genCode(PrintStream out) {
    getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t imulq %rbx, %rax");
  }
  public void Div.genCode(PrintStream out) {
    getLeft().genCode(out);
    out.println("\t pushq %rax");
    getRight().genCode(out);
    out.println("\t movq %rax, %rbx");
    out.println("\t popq %rax");
    out.println("\t movq $0, %rdx");
    out.println("\t idivq %rbx, %rax");
  }
  public void Mod.genCode(PrintStream out) {
    getLeft().genCode(out);
    out.println("\t pushq %rax");
    getRight().genCode(out);
    out.println("\t movq %rax, %rbx");
    out.println("\t popq %rax");
    out.println("\t movq $0, %rdx");
    out.println("\t idivq %rbx, %rax");
    out.println("\t movq %rdx, %rax");
  }
  public void Add.genCode(PrintStream out) {
    getLeft().genCode(out);
		out.println("\t pushq %rax");
		getRight().genCode(out);
		out.println("\t movq %rax, %rbx");
		out.println("\t popq %rax");
		out.println("\t addq %rbx, %rax");
  }
  public void Sub.genCode(PrintStream out) {
    getLeft().genCode(out);
    out.println("\t pushq %rax");
    getRight().genCode(out);
    out.println("\t movq %rax, %rbx");
    out.println("\t popq %rax");
    out.println("\t subq %rbx, %rax");
  }
  public void Lesser.genCode(PrintStream out) {

  }
  public void Greater.genCode(PrintStream out) {

  }
  public void LesserEqual.genCode(PrintStream out) {

  }
  public void GreaterEqual.genCode(PrintStream out) {

  }
  public void NotEqual.genCode(PrintStream out) {

  }
  public void Equal.genCode(PrintStream out) {

  }
  public void IdUseExpr.genCode(PrintStream out) {
    getName().genCode(out);
  }
  public void IdDecl.genCode(PrintStream out) {
    out.println("\t movq " + address() + ", %rax");
  }
  public void IdUse.genCode(PrintStream out) {
    out.println("\t movq " + decl().address() + ", %rax");
  }
  public void IntValue.genCode(PrintStream out) {
    out.println("\t movq $" + getINTEGER() + ", %rax");
  }

  /**
   * Address of local variable variable in the current stack frame.
   */
  syn String IdDecl.address() = "-"+(localIndex()*8)+"(%rbp)";

  /**
   * Local variable counting.
   */
  syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

  /**
   * Local variable numbering.
   */
  syn int ASTNode.localIndex() = prevNode().localIndex();
  eq Program.localIndex() = 0;
  eq IdDecl.localIndex() = prevNode().localIndex() + 1;

  inh ASTNode ASTNode.prevNode();
  eq ASTNode.getChild(int i).prevNode() = prevNode(i);
  syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
  syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;

}
