Program ::= Function*;

Block ::= [Stmt];

Function ::= name:Id [parameter:IdDecl] codeBlock:Block;

abstract Stmt;
Declaration:Stmt ::= name:IdDecl;
Assignment:Stmt ::= name:IdUse value:Expr;
WhileStmt:Stmt ::= condition:Expr codeBlock:Block;
IfStmt:Stmt ::= condition:Expr codeBlock:Block [else:Block];
Return:Stmt ::= return:Expr;
Print:Stmt ::= print:Expr;

abstract Expr;
abstract Term:Expr;
abstract Factor:Expr;
abstract BinExpr:Expr ::= left:Expr right:Expr;
abstract Prod:BinExpr;
abstract Sum:BinExpr;

Mul:Prod;
Div:Prod;
Mod:Prod;
Add:Sum;
Sub:Sum;

Lesser:BinExpr;
Greater:BinExpr;
LesserEqual:BinExpr;
GreaterEqual:BinExpr;
NotEqual:BinExpr;
Equal:BinExpr;

Id ::= <ID>;
IdDecl ::= <ID>;
IdUse:Expr ::= <ID>;
IntValue:Expr ::= <INTEGER>;
