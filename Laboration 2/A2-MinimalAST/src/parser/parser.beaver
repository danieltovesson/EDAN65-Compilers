%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals LBRACKET, RBRACKET, LPARA, RPARA, ASSIGN, PLUS, SEMI, INT, ID, INTEGER;

%typeof program = "Program";
%typeof function = "Function";
%typeof block = "Block";
%typeof functionList = "List";

%typeof stmt = "Stmt";
%typeof declaration = "Declaration";
%typeof assignment = "Assignment";
%typeof stmtList = "List";

%typeof expr = "Expr";
%typeof term = "Expr";
%typeof factor = "Expr";
%typeof sum = "Expr";

%typeof id = "Id";
%typeof idDecl = "IdDecl";
%typeof idUse = "IdUse";
%typeof intValue = "IntValue";

%goal program;

program = 			functionList.a {: return new Program(a); :} ;

function = 			INT id.a LPARA RPARA block.b {: return new Function(a, b); :} ;

block =					LBRACKET RBRACKET {: return new	Block(); :}
								| LBRACKET stmtList.a RBRACKET {: return new Block(new Opt(a)); :}
								;

functionList =
								function.a {: return new List().add(a); :}
								| functionList.a function.b {: return a.add(b); :}
								;

stmt =
								declaration
								| assignment
								;

declaration = 	INT idDecl.a SEMI {: return new Declaration(a); :} ;

assignment = 		idUse.a ASSIGN expr.b SEMI {: return new Assignment(a, b); :} ;

stmtList =
								stmt.a {: return new List().add(a); :}
								| stmtList.a stmt.b {: return a.add(b); :}
								;

expr = 					sum;

term = 					factor;

factor = 				intValue | idUse;

sum = 					sum.a PLUS term.b {: return new Add(a, b); :}
 								| term
								;

id = 						ID.a {: return new Id(a); :} ;

idDecl = 				ID.a {: return new IdDecl(a); :} ;

idUse = 				ID.a {: return new IdUse(a); :} ;

intValue = 			INTEGER.a {: return new IntValue(a); :} ;
