%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals LBRACKET, RBRACKET, LPARA, RPARA, ASSIGN, PLUS, SEMI, INT, ID, INTEGER;

%typeof program = "Program";
%typeof functions = "Functions";
%typeof functionList = "List";
%typeof stmtList = "List";
%typeof block = "Block";

%typeof stmt = "Stmt";
%typeof declaration = "Declaration";
%typeof assignment = "Assignment";

%typeof expr = "Expr";
%typeof factor = "Expr";
%typeof sum = "Expr";
%typeof nbr = "Nbr";
%typeof id = "Id";
%typeof idDecl = "IdDecl";
%typeof idUse = "IdUse";

%goal program;

program = functionList.a {: return new Program(a); :} ;

functions = INT id.a LPARA RPARA block.b {: return new Functions(a, b); :} ;

functionList =
							functions.a {: return new List().add(a); :}
							| functionList.a functions.b {: return a.add(b); :} ;

stmt =
							declaration
							| assignment ;

stmtList =
							stmt.a {: return new List().add(a); :}
							| stmtList.a stmt.b {: return a.add(b); :} ;

block =				LBRACKET RBRACKET {: return new	Block(); :}
							| LBRACKET stmtList.a RBRACKET {: return new Block(new Opt(a)); :} ;

declaration = INT idDecl.a SEMI {: return new Declaration(a); :} ;

assignment = idUse.a ASSIGN expr.b SEMI {: return new Assignment(a, b); :} ;

expr = sum;

factor = nbr | idUse;

sum = sum.a PLUS term.b {: return new Add(a, b); :}
 			| term;

term = factor;

nbr = INTEGER.a {: return new Nbr(a); :} ;

id = ID.a {: return new Id(a); :} ;

idDecl = ID.a {: return new IdDecl(a); :} ;

idUse = ID.a {: return new IdUse(a); :} ;
